(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const API = {
  getJournalEntries() {
    return fetch("http://localhost:8088/entries").then(response => response.json());
  },

  postJournalEntry(journalEntryObject) {
    fetch("http://localhost:8088/entries", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(journalEntryObject)
    });
  }

};
var _default = API;
exports.default = _default;

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const renderEntries = {
  renderJournalEntries(entryHTML) {
    $("#entryLog").append(entryHTML);
  }

};
var _default = renderEntries;
exports.default = _default;

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eventListeners = _interopRequireDefault(require("./eventListeners"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const journalEntryForm = {
  createEntryForm() {
    let entryForm = $("#entryForm");
    console.log(entryForm);
    let dateField = document.createElement("section");
    dateField.classList.add("formElement");
    let dateInput = document.createElement("input");
    dateInput.setAttribute("id", "journalDate");
    dateInput.setAttribute("type", "date");
    dateInput.setAttribute("required", "");
    dateInput.setAttribute("name", "journalDate");
    let dateLabel = document.createElement("label");
    dateLabel.setAttribute("for", "journalDate");
    dateLabel.textContent = "Date of Entry";
    dateField.appendChild(dateLabel);
    dateField.appendChild(dateInput);
    let conceptsField = document.createElement("section");
    conceptsField.classList.add("formElement");
    let conceptsInput = document.createElement("textarea");
    conceptsInput.setAttribute("id", "conceptsCovered");
    conceptsInput.setAttribute("cols", "60");
    conceptsInput.setAttribute("rows", "1");
    conceptsInput.setAttribute("required", "");
    conceptsInput.setAttribute("name", "conceptsCovered");
    let conceptsLabel = document.createElement("label");
    conceptsLabel.setAttribute("for", "conceptsCovered");
    conceptsLabel.textContent = "Concepts Covered";
    conceptsField.appendChild(conceptsLabel);
    conceptsField.appendChild(conceptsInput);
    let journalEntryField = document.createElement("section");
    journalEntryField.classList.add("formElement");
    let journalEntryInput = document.createElement("textarea");
    journalEntryInput.setAttribute("id", "journalEntry");
    journalEntryInput.setAttribute("cols", "60");
    journalEntryInput.setAttribute("rows", "1");
    journalEntryInput.setAttribute("required", "");
    journalEntryInput.setAttribute("name", "journalEntry");
    let journalEntryLabel = document.createElement("label");
    journalEntryLabel.setAttribute("for", "journalEntry");
    journalEntryLabel.textContent = "Entry";
    journalEntryField.appendChild(journalEntryLabel);
    journalEntryField.appendChild(journalEntryInput);
    let moodField = document.createElement("fieldset");
    moodField.classList.add("formElement");
    moodField.setAttribute("id", "moodForTheDay");
    let moodFieldLegend = document.createElement("legend");
    moodFieldLegend.textContent = "Mood for the Day";
    let moodDiv = document.createElement("div");
    moodDiv.setAttribute("id", "moodDiv");
    let moodOption1 = document.createElement("input");
    moodOption1.setAttribute("value", "Happy");
    moodOption1.setAttribute("name", "mood");
    moodOption1.setAttribute("id", "moodChoice1");
    moodOption1.setAttribute("type", "radio");
    moodOption1.setAttribute("checked", "");
    let moodLabel1 = document.createElement("label");
    moodLabel1.setAttribute("for", "moodChoice1");
    moodLabel1.textContent = "Happy";
    let moodOption2 = document.createElement("input");
    moodOption2.setAttribute("value", "Sad");
    moodOption2.setAttribute("name", "mood");
    moodOption2.setAttribute("id", "moodChoice2");
    moodOption2.setAttribute("type", "radio");
    let moodLabel2 = document.createElement("label");
    moodLabel2.setAttribute("for", "moodChoice2");
    moodLabel2.textContent = "Sad";
    let moodOption3 = document.createElement("input");
    moodOption3.setAttribute("value", "Ok");
    moodOption3.setAttribute("name", "mood");
    moodOption3.setAttribute("id", "moodChoice3");
    moodOption3.setAttribute("type", "radio");
    let moodLabel3 = document.createElement("label");
    moodLabel3.setAttribute("for", "moodChoice3");
    moodLabel3.textContent = "Ok";
    moodField.appendChild(moodFieldLegend);
    moodDiv.appendChild(moodOption1);
    moodDiv.appendChild(moodLabel1);
    moodDiv.appendChild(moodOption2);
    moodDiv.appendChild(moodLabel2);
    moodDiv.appendChild(moodOption3);
    moodDiv.appendChild(moodLabel3);
    moodField.appendChild(moodDiv);
    entryForm.append(dateField);
    entryForm.append(conceptsField);
    entryForm.append(journalEntryField);
    entryForm.append(moodField);
    let journalEntryButton = $("#recordEntryButton");
    journalEntryButton.click(_eventListeners.default.handleRecordEntryButton);
    let moodRadioButtons = $("[name = 'mood']");
    moodRadioButtons.click(_eventListeners.default.filterOnRadioButton);
  }

};
var _default = journalEntryForm;
exports.default = _default;

},{"./eventListeners":5}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const entryComponent = {
  makeJournalEntryComponent(entry) {
    let jEDate = entry.date;
    let jEConcept = entry.concept;
    let jEEntry = entry.entry;
    let jEMood = entry.mood;
    let br = document.createElement("br");
    let br2 = document.createElement("br");
    let br3 = document.createElement("br");
    let entryDiv = document.createElement("div");
    let entryDivText1 = document.createTextNode(`Date: ${jEDate}`);
    let entryDivText2 = document.createTextNode(`Concepts Covered: ${jEConcept}`);
    let entryDivText3 = document.createTextNode(`Journal Entry: ${jEEntry}`);
    let entryDivText4 = document.createTextNode(`Mood: ${jEMood}`);
    entryDiv.classList.add("journalEntry");
    entryDiv.appendChild(entryDivText1);
    entryDiv.appendChild(br);
    entryDiv.appendChild(entryDivText2);
    entryDiv.appendChild(br2);
    entryDiv.appendChild(entryDivText3);
    entryDiv.appendChild(br3);
    entryDiv.appendChild(entryDivText4);
    return entryDiv;
  }

};
var _default = entryComponent;
exports.default = _default;

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _data = _interopRequireDefault(require("./data"));

var _entryComponent = _interopRequireDefault(require("./entryComponent"));

var _formValidation = _interopRequireDefault(require("./formValidation"));

var _entriesDOM = _interopRequireDefault(require("./entriesDOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const eventListeners = {
  handleRecordEntryButton() {
    let entryDate = $("#journalDate").val();
    let entryConcepts = $("#conceptsCovered").val();
    let entryText = $("#journalEntry").val();
    let entryMood = $("[name = 'mood']").val();
    let journalEntryObject = {
      "date": `${entryDate}`,
      "concept": `${entryConcepts}`,
      "entry": `${entryText}`,
      "mood": `${entryMood}`
    };

    if (_formValidation.default.validateForm()) {
      _data.default.postJournalEntry(journalEntryObject);
    } else {
      return;
    }

    location.reload(true);
  },

  filterOnRadioButton() {
    let entryLog = $("#entryLog");
    entryLog.empty();
    let mood = event.target.value;

    _data.default.getJournalEntries().then(parsedEntries => {
      const filteredEntries = parsedEntries.filter(entryItem => entryItem.mood === mood);
      filteredEntries.forEach(entry => {
        let entryHTML = _entryComponent.default.makeJournalEntryComponent(entry);

        _entriesDOM.default.renderJournalEntries(entryHTML);
      });
    });
  }

};
var _default = eventListeners;
exports.default = _default;

},{"./data":1,"./entriesDOM":2,"./entryComponent":4,"./formValidation":6}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const formValidation = {
  validateForm() {
    // let alertsArray = [];
    if (formValidation.validateDate() && formValidation.validateConcepts() && formValidation.validateEntry() && formValidation.validateMood()) {
      return true;
    } else {
      // alert("Date field must be filled out");
      return false;
    }
  },

  validateDate() {
    let dateValidation = document.forms["entryForm"]["journalDate"].val();

    if (dateValidation === "") {
      alert("Date field must be filled out");
      return false;
    } else {
      return true;
    }
  },

  validateConcepts() {
    let conceptsValidation = document.forms["entryForm"]["conceptsCovered"].val();
    let conceptsLength = conceptsValidation.length;

    if (conceptsValidation === "") {
      alert("Concepts field must be filled out");
      return false;
    } else if (conceptsLength > 100) {
      alert("Concepts field must be filled out");
      return false;
    } else {
      return true;
    }
  },

  validateEntry() {
    let entryValidation = document.forms["entryForm"]["journalEntry"].val();
    let pottyMouthWords = new RegExp([/\b(\w*shit\w*)\b|\b(\w*fuck\w*)\b|\b(\w*piss\w*)\b|(hell)|\b(\w*damn\w*)\b/], "i");
    console.log(entryValidation);
    console.log(pottyMouthWords);

    if (entryValidation === "") {
      alert("Entry field must be filled out");
      return false;
    } else if (pottyMouthWords.test(entryValidation)) {
      alert("Potty mouth");
      return false;
    } else {
      return true;
    }
  },

  validateMood() {
    let moodValidation = document.forms["entryForm"]["moodForTheDay"].val();

    if (moodValidation === "") {
      alert("Mood field must be filled out");
      return false;
    } else {
      return true;
    }
  }

};
var _default = formValidation;
exports.default = _default;

},{}],7:[function(require,module,exports){
"use strict";

var _data = _interopRequireDefault(require("./data"));

var _entriesForm = _interopRequireDefault(require("./entriesForm"));

var _entriesDOM = _interopRequireDefault(require("./entriesDOM"));

var _entryComponent = _interopRequireDefault(require("./entryComponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_entriesForm.default.createEntryForm();

_data.default.getJournalEntries().then(parsedEntries => {
  parsedEntries.forEach(entry => {
    let entryHTML = _entryComponent.default.makeJournalEntryComponent(entry);

    _entriesDOM.default.renderJournalEntries(entryHTML);
  });
});

},{"./data":1,"./entriesDOM":2,"./entriesForm":3,"./entryComponent":4}]},{},[7])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
